## 2部マッチング

    int V=0;//頂点数
    vector<int>G[10000];//隣接リスト
    int match[10000];//マッチングのペア
    bool used[10000];

    void add_edge(int u, int v){
      G[u].push_back(v);
      G[v].push_back(u);
    }
    bool dfs(int v){
      used[v]=true;
      for(int i=0;i<G[v].size();i++){
        int u=G[v][i], w=match[u];
        if(w<0 || (!used[w] && dfs(w))){
          match[v]=u;
          match[u]=v;
          return true;
        }
      }
      return false;
    }
    int biparticle_matching(int vv){//頂点数を引数で渡す
      V=vv;
      int res=0;
      memset(match, -1, sizeof(match));
      for(int v=0;v<V;v++){
        if(match[v]<0){
          memset(used,false,sizeof(used));
          if(dfs(v)){
            res++;
          }
        }
      }
    return res;
    }


## 最大費用流

    struct edge {int to,cap,rev;};
    vector<edge> G[MAX_V];
    int level[MAX_V];
    int iter[MAX_V];

    void add_edge(int from, int to, int cap){
      G[from].push_back((edge){to,cap,(int)G[to].size()});
      G[to].push_back((edge){from,0,(int)G[from].size()-1});
    }

    void bfs(int s){
      memset(level, -1, sizeof(level));
      queue<int> que;
      level[s]=0;
      que.push(s);
      while(!que.empty()){
        int v=que.front();
        que.pop();
        for(int i=0;i<G[v].size();i++){
          edge &e=G[v][i];
          if(e.cap>0 && level[e.to]<0){
            level[e.to]=level[v]+1;
            que.push(e.to);
          }
        }
      }
    }

    int dfs(int v, int t, int f){
        if(v==t)return f;
        for(int &i=iter[v];i<G[v].size();i++){
            edge &e=G[v][i];
            if(e.cap>0 && level[v]<level[e.to]){
                int d=dfs(e.to,t,min(f,e.cap));
                if(d>0){
                    e.cap-=d;
                    G[e.to][e.rev].cap+=d;
                    return d;
                }
            }
        }
        return 0;
    }

    int max_flow(int s,int t){
        int flow=0;
        while(1){
            bfs(s);//s:スタート
            if(level[t]<0) return flow;
            memset(iter,0,sizeof(iter));
            int f;
            while((f=dfs(s,t,INT_MAX_VALUE))>0){
                flow+=f;
            }
        }
    }

## 最小費用流

    typedef pair<int,int>P;
    struct edge{
      int to;
      int cap;
      int cost;
      int rev;
    };
    int V;
    vector<edge>G[100];
    int h[100];
    int dist[100];
    int prevv[100];
    int preve[100];
    void add_edge(int from, int to, int cap, int cost){
      G[from].push_back((edge){to,cap,cost,(int)G[to].size()});
      G[to].push_back((edge){from,0,-cost,(int)G[from].size()-1});
    }
    int min_cost_flow(int s,int t,int f){
      int res=0;
      fill(h,h+V,0);
      while(f>0){
        priority_queue<P,vector<P>,greater<P>> que;
        fill(dist,dist+V,INT_MAX_VALUE);
        dist[s]=0;
        que.push(P(0,s));

        while(!que.empty()){
          P p=que.top();
          que.pop();
          int v=p.second;
          if(dist[v]<p.first){
            continue;
          }
          for(int i=0;i<G[v].size();i++){
            edge &e=G[v][i];
            if(e.cap>0 && dist[e.to]>dist[v]+e.cost+h[v]-h[e.to]){
                dist[e.to]=dist[v]+e.cost+h[v]-h[e.to];
                prevv[e.to]=v;
                preve[e.to]=i;
                que.push(P(dist[e.to],e.to));
            }
          }
        }
        if(dist[t]==INT_MAX_VALUE){
          return -1;
        }
        for(int v=0;v<V;v++){
          h[v]+=dist[v];
        }
        int d=f;
        for(int v=t;v!=s;v=prevv[v]){
          d=min(d,G[prevv[v]][preve[v]].cap);
        }
        f-=d;
        res+=d*h[t];
        for(int v=t;v!=s;v=prevv[v]){
          edge &e=G[prevv[v]][preve[v]];
          e.cap-=d;
          G[v][e.rev].cap+=d;
        }
      }
      return res;
    }
    //使い方
    add_edge(N+1,N+3,INT_MAX_VALUE,0);
    ・・・
    V=N+2;//忘れずに
    int ans=min_cost_flow(0,N+3,N);
