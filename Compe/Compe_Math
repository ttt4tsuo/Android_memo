## Math

素数判定

    int isPrim(int a){
      if(a==1) return 0;
      for(int i=2;i*i<=a;i++){
        if(a%i==0){
          return 0;
        }
      }
      return 1;
    }

素因数分解

    int A;
    scanf("%d",&A);
    map<int,int> ans;
    ans.clear();

    int j=2;
    while(A>1){
      if(A%j==0){
        if(ans.find(j)==ans.end()){
            ans.insert(map<int,int>::value_type(j,1));
        }else{
            ans[j]++;
        }
        A=A/j;
      }else{
        j++;
      }
    }

    map<int,int>::iterator it=ans.begin();
    while(it!=ans.end()){
      printf("%d %d\n",it->first,it->second);
      it++;
    }

エラトステネスの櫛

    int prime[100001];
    bool is_prime[100000+2];

    int p=0;
    for(int i=0;i<=100001;i++){
      is_prime[i]=true;
      }
    is_prime[0]=false;
    is_prime[1]=false;
    for(int i=2;i<=100001;i++){
      if(is_prime[i]){
        prime[p++]=i;
        for(int j=2*i;j<=100001;j+=i){
          is_prime[j]=false;
        }
      }
    }

最大公約数

    //#include <numeric>にgcd()あり
    int gcd(int a, int b){
      if(a<b){
        swap(a,b);
      }
      while(b){
        int m = a % b;
        a = b;
        b = m;
      }
      return a;
    }

最小公倍数

    //#include <numeric>にlcm()あり
    int lcm(int a, int b){
      return (a*b)/gcd(a,b);
    }

## 繰り返し2乗法

    ll mod_pow(ll x, ll n, ll mod){
      //xのn乗を計算するのにn乗を2進表記にして計算
      //x^22 = x^16 + x^4 + x^2
      ll ret=1;
      while(n>0){
        if(n&1){
          ret=(ret*x)%mod;//答えに付加
        }
        x=(x*x)%mod;//2乗
        n >>=1;
      }
      return ret;
    }

## 繰り返し2乗法(行列)

    typedef vector<double> vec;
    typedef vector<vec> mat;
    mat mul(mat &A, mat &B, ll mod){
      mat C(A.size(),vec(B[0].size()));
      for(int i=0;i<A.size();i++){
        for(int j=0;j<B[0].size();j++){
          for(int k=0;k<B.size();k++){
            C[i][j]+=A[i][k]*B[k][j];
            C[i][j]%=mod;
          }
        }
      }
      return C;
    }

    //n: 冪指数
    mat pow(mat &A, ll n, ll mod){
      //xのn乗を計算するのにn乗を2進表記にして計算
      //x^22 = x^16 + x^4 + x^2
      mat B(A.size(),vec(A.size()));
      for(int i=0;i<A.size();i++){
        B[i][i]=1;
      }
      while(n>0){
        if(n&1){
          B=mul(B,A,mod);//答えに付加
        }
        A=mul(A,A,mod);//2乗
        n >>=1;
      }
      return B;
    }

    //使い方
    mat A(R*C,vec(R*C));
    mat res=mul(A,A,1);

    //2行1列(縦ベクトル)
    mat F(2,vec(1));

    //2行2列の行列の逆行列
    //detは逆元にして乗ずる
    //modをとっているのでマイナス値がでると使えない
    ll det=(A[0][0]*A[1][1])%1000000007+1000000007-(A[1][0]*A[0][1])%1000000007;
    ll invdet=mod_pow(det,1000000005,1000000007);
    mat invA(2,vec(2));
    invA[0][0]=A[1][1];
    invA[0][1]=1000000007-A[0][1];
    invA[1][0]=1000000007-A[1][0];
    invA[1][1]=A[0][0];

    //回転
    mat sum(3,vec(3));
    for(int i=0;i<3;i++){
        sum[i][i]=1;
    }
    mat kake(3,vec(3));
    kake[0][1]=1;
    kake[1][0]=-1;
    kake[2][2]=1;
    sum=mul(kake,sum,1);

    //x座標に沿った平行移動
    mat kake(3,vec(3));
    for(int i=0;i<3;i++){
        kake[i][i]=1;
    }
    kake[0][2]=x座標増加;
    sum=mul(kake,sum,1);

    //y座標に沿った水平移動
    mat kake(3,vec(3));
    for(int i=0;i<3;i++){
        kake[i][i]=1;
    }
    kake[1][2]=y座標増加;
    sum=mul(kake,sum,1);

    //フィボナッチ数列
    mat A(2,vec(2));
    A[0][0]=1;
    A[0][1]=1;
    A[1][0]=1;
    A[1][1]=0;
    mat res=pow(A,N,1000000007);
    ans=res[1][0];
