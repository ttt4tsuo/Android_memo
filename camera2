package jp.kanagawa.kawasaki.nikagakucho;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.concurrent.Semaphore;

import android.app.Activity;
import android.graphics.ImageFormat;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.Image;
import android.media.ImageReader;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.widget.Button;

public class MainActivity extends Activity {

	TextureView mTextureView;
    CaptureRequest.Builder mPreviewRequestBuilder;
    CameraDevice mCameraDevice;
    ImageReader mImageReader;
    CameraCaptureSession mCaptureSession;
    CaptureRequest mPreviewRequest;
    CameraManager mCameraManager;
    String mCameraId;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
        
        mCameraManager = (CameraManager) getSystemService(this.CAMERA_SERVICE);
		try {
			for (String cameraId : mCameraManager.getCameraIdList()) {
			    CameraCharacteristics characteristics = mCameraManager.getCameraCharacteristics(cameraId);
			    if (characteristics.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT) {
                    mCameraId=cameraId;
                    // For still image captures, we use the largest available size.
                    mImageReader = ImageReader.newInstance(320,240,ImageFormat.JPEG, /*maxImages*/2);
                    mImageReader.setOnImageAvailableListener(mOnImageAvailableListener, mBackgroundHandler);
			    }
			}
		} catch (CameraAccessException e) {
			e.printStackTrace();
		}
		
		//mTextureView = (TextureView)findViewById(R.id.texture);
        mTextureView = new TextureView(this);
        mTextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        setContentView(mTextureView);
	}
	
    private void createCameraPreviewSession() {

    	try {
    		SurfaceTexture texture = mTextureView.getSurfaceTexture();
    		texture.setDefaultBufferSize(320, 240);
    		Surface surface = new Surface(texture);
        
			mPreviewRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);	
			mPreviewRequestBuilder.addTarget(surface);
			mCameraDevice.createCaptureSession(Arrays.asList(surface, mImageReader.getSurface()),
                new CameraCaptureSession.StateCallback() {

                    @Override
                    public void onConfigured(CameraCaptureSession cameraCaptureSession) {
                        // The camera is already closed
                        if (null == mCameraDevice) {
                            return;
                        }

                        // When the session is ready, we start displaying the preview.
                        mCaptureSession = cameraCaptureSession;
                        // Auto focus should be continuous for camera preview.
                        /*mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);
                        // Flash is automatically enabled when necessary.
                        mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
                        CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);*/

                        // Finally, we start displaying the camera preview.
                        mPreviewRequest = mPreviewRequestBuilder.build();
                        try {
							mCaptureSession.setRepeatingRequest(mPreviewRequest, mCaptureCallback, mBackgroundHandler);
						} catch (CameraAccessException e) {
							e.printStackTrace();
						}
                        
                    }

                    @Override
                    public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
                        Log.d("myapp","Activity Failed");
                    }
                }, null);
        } catch (CameraAccessException e) {

		}
    }
    
    private Semaphore mCameraOpenCloseLock = new Semaphore(1);
    private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {
        @Override
        public void onOpened(CameraDevice cameraDevice) {
            // This method is called when the camera is opened.  We start camera preview here.
            mCameraOpenCloseLock.release();
            mCameraDevice = cameraDevice;
            createCameraPreviewSession();
        }
        @Override
        public void onDisconnected(CameraDevice cameraDevice) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }
        @Override
        public void onError(CameraDevice cameraDevice, int error) {
            mCameraOpenCloseLock.release();
            cameraDevice.close();
            mCameraDevice = null;
        }
 
    };
    
    private Handler mBackgroundHandler;
    private File mFile;
    private final ImageReader.OnImageAvailableListener mOnImageAvailableListener = new ImageReader.OnImageAvailableListener() {
    	@Override
    	public void onImageAvailable(ImageReader reader) {
    		mBackgroundHandler.post(new ImageSaver(reader.acquireNextImage(), mFile));
    	}
    };
    
    private static class ImageSaver implements Runnable { 
        private final Image mImage;
        private final File mFile;
 
        public ImageSaver(Image image, File file) {
            mImage = image;
            mFile = file;
        }
 
        @Override
        public void run() {
            ByteBuffer buffer = mImage.getPlanes()[0].getBuffer();
            byte[] bytes = new byte[buffer.remaining()];
            buffer.get(bytes);
            FileOutputStream output = null;
            try {
                output = new FileOutputStream(mFile);
                output.write(bytes);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                mImage.close();
                if (null != output) {
                    try {
                        output.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }
    
    private final TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {
    	@Override
    	public void onSurfaceTextureAvailable(SurfaceTexture texture, int width, int height) {
    		
    		try {
				mCameraManager.openCamera(mCameraId, mStateCallback, mBackgroundHandler);
			} catch (CameraAccessException e) {
				e.printStackTrace();
			}
    	}
    	@Override
    	public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width, int height) {
    	}

    	@Override
    	public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {
    		return true;
    	}
    	@Override
    	public void onSurfaceTextureUpdated(SurfaceTexture texture) {
    	}
    };
    
    private CameraCaptureSession.CaptureCallback mCaptureCallback = new CameraCaptureSession.CaptureCallback() {
    	private void process(CaptureResult result) {
    	}
    	@Override
    	public void onCaptureProgressed(CameraCaptureSession session, CaptureRequest request,CaptureResult partialResult) {
    		process(partialResult);
    	}
    	@Override
    	public void onCaptureCompleted(CameraCaptureSession session, CaptureRequest request,TotalCaptureResult result) {
    		process(result);
    	}
    };
}
